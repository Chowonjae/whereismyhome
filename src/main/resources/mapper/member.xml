<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	<!-- private String userId;
	private String userName;
	private String userPwd;
	private String emailId;
	private String emailDomain;
	private String joinDate;
	private String salt; -->
<mapper namespace="com.ssafy.member.model.dao.MemberDao">

	<resultMap type="memberDto" id="member">
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
		<result column="email_id" property="emailId"/>
		<result column="email_domain" property="emailDomain"/>
		<result column="join_date" property="joinDate"/>
	</resultMap>

	<select id="idCheck" parameterType="String" resultType="int">
		select count(user_id)
		from members
		where user_id = #{userId}
	</select>
	
	<select id="getSalt" parameterType="String" resultType="String">
		select salt from members where user_id = #{userId}
	</select>
	
	<select id="getUserInfo" parameterType="memberDto" resultMap="member">
		select user_id, user_name, email_id, email_domain, join_date
		from members
		where user_id = #{userId} and user_password = #{userPwd}
	</select>
	
	<insert id="joinMember" parameterType="memberDto">
		insert into members (user_name, user_id, user_password, salt, email_id, email_domain, join_date)
		values (#{userName}, #{userId}, #{userPwd}, #{salt}, #{emailId}, #{emailDomain}, now())
	</insert>

	<update id="modifyMember" parameterType="memberDto">
		update members
		set user_password = #{userPwd}, email_id = #{emailId}, email_domain = #{emailDomain}, salt = #{salt}
		where user_id = #{userId}
	</update>
	
	<update id="findpw" parameterType="memberDto">
		update members
		set user_password = #{userPwd}, salt = #{salt}
		where email_id = #{emailId} and email_domain = #{emailDomain} and user_id = #{userId} and user_name = #{userName}
	</update>
	
	<delete id="deleteMember" parameterType="String">
		delete from members
		where user_id = #{userId};
	</delete>
	
	<!-- jwt -->
	<select id="userInfo" parameterType="string" resultMap="member">
		select user_name, user_id, email_id, email_domain, join_date
		from members
		where user_id = #{userId}
	</select>
	
	<select id="getRefreshToken" parameterType="string" resultType="string">
		select token
		from members
		where user_id = #{userId}
	</select>
	
	<update id="saveRefreshToken" parameterType="map">
		update members
		set token = #{token}
		where user_id = #{userId}
	</update>
	
	<update id="deleteRefreshToken" parameterType="map">
		update members
		set token = #{token, jdbcType=VARCHAR}
		where user_id = #{userId}
	</update>
	
</mapper>